// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/FileStream.proto
#ifndef GRPC_proto_2fFileStream_2eproto__INCLUDED
#define GRPC_proto_2fFileStream_2eproto__INCLUDED

#include "proto/FileStream.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace filestream {

// Insipration: https://dev.to/techschoolguru/upload-file-in-chunks-with-client-streaming-grpc-golang-4loc
// TODO: Generalise further to ensure that streaming of any generic file is possible.
//
class Transfer final {
 public:
  static constexpr char const* service_full_name() {
    return "filestream.Transfer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::filestream::Image>> FileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::filestream::Image>>(FileStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filestream::Image>> AsyncFileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filestream::Image>>(AsyncFileStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filestream::Image>> PrepareAsyncFileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::filestream::Image>>(PrepareAsyncFileStreamRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::ClientWriteReactor< ::filestream::Image>* reactor) = 0;
      #else
      virtual void FileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::experimental::ClientWriteReactor< ::filestream::Image>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::filestream::Image>* FileStreamRaw(::grpc::ClientContext* context, ::filestream::TransferResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::filestream::Image>* AsyncFileStreamRaw(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::filestream::Image>* PrepareAsyncFileStreamRaw(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::filestream::Image>> FileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::filestream::Image>>(FileStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::filestream::Image>> AsyncFileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::filestream::Image>>(AsyncFileStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::filestream::Image>> PrepareAsyncFileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::filestream::Image>>(PrepareAsyncFileStreamRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::ClientWriteReactor< ::filestream::Image>* reactor) override;
      #else
      void FileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::experimental::ClientWriteReactor< ::filestream::Image>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::filestream::Image>* FileStreamRaw(::grpc::ClientContext* context, ::filestream::TransferResponse* response) override;
    ::grpc::ClientAsyncWriter< ::filestream::Image>* AsyncFileStreamRaw(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::filestream::Image>* PrepareAsyncFileStreamRaw(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FileStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FileStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::filestream::Image>* reader, ::filestream::TransferResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FileStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FileStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FileStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filestream::Image>* /*reader*/, ::filestream::TransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::filestream::TransferResponse, ::filestream::Image>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FileStream<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FileStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FileStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::filestream::Image, ::filestream::TransferResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::filestream::TransferResponse* response) { return this->FileStream(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_FileStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filestream::Image>* /*reader*/, ::filestream::TransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::filestream::Image>* FileStream(
      ::grpc::CallbackServerContext* /*context*/, ::filestream::TransferResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::filestream::Image>* FileStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::filestream::TransferResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_FileStream<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_FileStream<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FileStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FileStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FileStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filestream::Image>* /*reader*/, ::filestream::TransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FileStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FileStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FileStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filestream::Image>* /*reader*/, ::filestream::TransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFileStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FileStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FileStream() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->FileStream(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FileStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FileStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::filestream::Image>* /*reader*/, ::filestream::TransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* FileStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* FileStream(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef Service StreamedService;
};

// Used by the server inside of a container to ensure that the system is ready and running.
// TODO: implement as per: https://github.com/grpc/grpc/blob/master/doc/health-checking.md https://medium.com/@github.gkarthiks/implementing-healthchecks-in-grpc-containers-for-kubernetes-d5049989ab12
class Health final {
 public:
  static constexpr char const* service_full_name() {
    return "filestream.Health";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::filestream::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filestream::HealthCheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filestream::HealthCheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filestream::HealthCheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filestream::HealthCheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::filestream::HealthCheckResponse>> Watch(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::filestream::HealthCheckResponse>>(WatchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::filestream::HealthCheckResponse>> AsyncWatch(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::filestream::HealthCheckResponse>>(AsyncWatchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::filestream::HealthCheckResponse>> PrepareAsyncWatch(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::filestream::HealthCheckResponse>>(PrepareAsyncWatchRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Watch(::grpc::ClientContext* context, ::filestream::HealthCheckRequest* request, ::grpc::ClientReadReactor< ::filestream::HealthCheckResponse>* reactor) = 0;
      #else
      virtual void Watch(::grpc::ClientContext* context, ::filestream::HealthCheckRequest* request, ::grpc::experimental::ClientReadReactor< ::filestream::HealthCheckResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filestream::HealthCheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filestream::HealthCheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::filestream::HealthCheckResponse>* WatchRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::filestream::HealthCheckResponse>* AsyncWatchRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::filestream::HealthCheckResponse>* PrepareAsyncWatchRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::filestream::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filestream::HealthCheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filestream::HealthCheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filestream::HealthCheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filestream::HealthCheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::filestream::HealthCheckResponse>> Watch(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::filestream::HealthCheckResponse>>(WatchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::filestream::HealthCheckResponse>> AsyncWatch(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::filestream::HealthCheckResponse>>(AsyncWatchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::filestream::HealthCheckResponse>> PrepareAsyncWatch(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::filestream::HealthCheckResponse>>(PrepareAsyncWatchRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Watch(::grpc::ClientContext* context, ::filestream::HealthCheckRequest* request, ::grpc::ClientReadReactor< ::filestream::HealthCheckResponse>* reactor) override;
      #else
      void Watch(::grpc::ClientContext* context, ::filestream::HealthCheckRequest* request, ::grpc::experimental::ClientReadReactor< ::filestream::HealthCheckResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::filestream::HealthCheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filestream::HealthCheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::filestream::HealthCheckResponse>* WatchRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request) override;
    ::grpc::ClientAsyncReader< ::filestream::HealthCheckResponse>* AsyncWatchRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::filestream::HealthCheckResponse>* PrepareAsyncWatchRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Check_;
    const ::grpc::internal::RpcMethod rpcmethod_Watch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Check(::grpc::ServerContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response);
    virtual ::grpc::Status Watch(::grpc::ServerContext* context, const ::filestream::HealthCheckRequest* request, ::grpc::ServerWriter< ::filestream::HealthCheckResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Check() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::filestream::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::filestream::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::filestream::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Watch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::filestream::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatch(::grpc::ServerContext* context, ::filestream::HealthCheckRequest* request, ::grpc::ServerAsyncWriter< ::filestream::HealthCheckResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Check<WithAsyncMethod_Watch<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Check() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response) { return this->Check(context, request, response); }));}
    void SetMessageAllocatorFor_Check(
        ::grpc::experimental::MessageAllocator< ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::filestream::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::filestream::HealthCheckResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Check(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::filestream::HealthCheckResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Watch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::filestream::HealthCheckRequest* request) { return this->Watch(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::filestream::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::filestream::HealthCheckResponse>* Watch(
      ::grpc::CallbackServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::filestream::HealthCheckResponse>* Watch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Check<ExperimentalWithCallbackMethod_Watch<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Check<ExperimentalWithCallbackMethod_Watch<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Check() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::filestream::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Watch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::filestream::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Check() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::filestream::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Watch() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::filestream::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Check() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Check(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::filestream::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Check(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Watch() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Watch(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::filestream::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Watch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Watch(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Check() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>* streamer) {
                       return this->StreamedCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::filestream::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filestream::HealthCheckRequest,::filestream::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Check<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Watch() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>* streamer) {
                       return this->StreamedWatch(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::filestream::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::filestream::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWatch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::filestream::HealthCheckRequest,::filestream::HealthCheckResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Watch<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Check<WithSplitStreamingMethod_Watch<Service > > StreamedService;
};

}  // namespace filestream


#endif  // GRPC_proto_2fFileStream_2eproto__INCLUDED
