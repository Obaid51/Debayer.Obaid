// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileStream.proto

#include "FileStream.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_FileStream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraId_FileStream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_FileStream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochTimestamp_FileStream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_FileStream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FrameMeta_FileStream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_FileStream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageChunk_FileStream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_FileStream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageHash_FileStream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_FileStream_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxSize_FileStream_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace filestream {
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
class ImageHashDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageHash> _instance;
} _ImageHash_default_instance_;
class FrameMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameMeta> _instance;
} _FrameMeta_default_instance_;
class TransferResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferResponse> _instance;
} _TransferResponse_default_instance_;
class MaxSizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaxSize> _instance;
} _MaxSize_default_instance_;
class ImageChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageChunk> _instance;
} _ImageChunk_default_instance_;
class EpochTimestampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EpochTimestamp> _instance;
} _EpochTimestamp_default_instance_;
class CameraIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraId> _instance;
} _CameraId_default_instance_;
class HealthCheckRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthCheckRequest> _instance;
} _HealthCheckRequest_default_instance_;
class HealthCheckResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthCheckResponse> _instance;
} _HealthCheckResponse_default_instance_;
}  // namespace filestream
static void InitDefaultsscc_info_CameraId_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_CameraId_default_instance_;
    new (ptr) ::filestream::CameraId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraId_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraId_FileStream_2eproto}, {}};

static void InitDefaultsscc_info_EpochTimestamp_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_EpochTimestamp_default_instance_;
    new (ptr) ::filestream::EpochTimestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EpochTimestamp_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EpochTimestamp_FileStream_2eproto}, {}};

static void InitDefaultsscc_info_FrameMeta_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_FrameMeta_default_instance_;
    new (ptr) ::filestream::FrameMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FrameMeta_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_FrameMeta_FileStream_2eproto}, {
      &scc_info_EpochTimestamp_FileStream_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ImageHash_FileStream_2eproto.base,
      &scc_info_MaxSize_FileStream_2eproto.base,
      &scc_info_CameraId_FileStream_2eproto.base,}};

static void InitDefaultsscc_info_HealthCheckRequest_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_HealthCheckRequest_default_instance_;
    new (ptr) ::filestream::HealthCheckRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthCheckRequest_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HealthCheckRequest_FileStream_2eproto}, {}};

static void InitDefaultsscc_info_HealthCheckResponse_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_HealthCheckResponse_default_instance_;
    new (ptr) ::filestream::HealthCheckResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthCheckResponse_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HealthCheckResponse_FileStream_2eproto}, {}};

static void InitDefaultsscc_info_Image_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_Image_default_instance_;
    new (ptr) ::filestream::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Image_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Image_FileStream_2eproto}, {
      &scc_info_FrameMeta_FileStream_2eproto.base,
      &scc_info_ImageChunk_FileStream_2eproto.base,}};

static void InitDefaultsscc_info_ImageChunk_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_ImageChunk_default_instance_;
    new (ptr) ::filestream::ImageChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageChunk_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageChunk_FileStream_2eproto}, {}};

static void InitDefaultsscc_info_ImageHash_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_ImageHash_default_instance_;
    new (ptr) ::filestream::ImageHash();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageHash_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageHash_FileStream_2eproto}, {}};

static void InitDefaultsscc_info_MaxSize_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_MaxSize_default_instance_;
    new (ptr) ::filestream::MaxSize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaxSize_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MaxSize_FileStream_2eproto}, {}};

static void InitDefaultsscc_info_TransferResponse_FileStream_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::filestream::_TransferResponse_default_instance_;
    new (ptr) ::filestream::TransferResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferResponse_FileStream_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferResponse_FileStream_2eproto}, {
      &scc_info_ImageHash_FileStream_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FileStream_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_FileStream_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FileStream_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FileStream_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::Image, framemeta_),
  PROTOBUF_FIELD_OFFSET(::filestream::Image, imagechunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::ImageHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::ImageHash, filehash_),
  PROTOBUF_FIELD_OFFSET(::filestream::ImageHash, hashalgorithm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, frameindex_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, imagehash_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, framesize_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, xaxispixels_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, yaxispixels_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, imagebitdepth_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, imagebitdepthreal_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, cameraid_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, containername_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, xmpmeta_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, exifmeta_),
  PROTOBUF_FIELD_OFFSET(::filestream::FrameMeta, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::TransferResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::TransferResponse, imagehash_),
  PROTOBUF_FIELD_OFFSET(::filestream::TransferResponse, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::MaxSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::MaxSize, size_),
  PROTOBUF_FIELD_OFFSET(::filestream::MaxSize, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::ImageChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::ImageChunk, chunkid_),
  PROTOBUF_FIELD_OFFSET(::filestream::ImageChunk, framechunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::EpochTimestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::EpochTimestamp, seconds_),
  PROTOBUF_FIELD_OFFSET(::filestream::EpochTimestamp, milliseconds_),
  PROTOBUF_FIELD_OFFSET(::filestream::EpochTimestamp, microseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::CameraId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::CameraId, cameraid_),
  PROTOBUF_FIELD_OFFSET(::filestream::CameraId, lensid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::HealthCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::HealthCheckRequest, service_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::filestream::HealthCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::filestream::HealthCheckResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::filestream::Image)},
  { 7, -1, sizeof(::filestream::ImageHash)},
  { 14, -1, sizeof(::filestream::FrameMeta)},
  { 33, -1, sizeof(::filestream::TransferResponse)},
  { 40, -1, sizeof(::filestream::MaxSize)},
  { 47, -1, sizeof(::filestream::ImageChunk)},
  { 54, -1, sizeof(::filestream::EpochTimestamp)},
  { 62, -1, sizeof(::filestream::CameraId)},
  { 69, -1, sizeof(::filestream::HealthCheckRequest)},
  { 75, -1, sizeof(::filestream::HealthCheckResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_ImageHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_FrameMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_TransferResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_MaxSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_ImageChunk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_EpochTimestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_CameraId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_HealthCheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::filestream::_HealthCheckResponse_default_instance_),
};

const char descriptor_table_protodef_FileStream_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020FileStream.proto\022\nfilestream\032\037google/p"
  "rotobuf/timestamp.proto\"]\n\005Image\022(\n\tfram"
  "eMeta\030\001 \001(\0132\025.filestream.FrameMeta\022*\n\nim"
  "ageChunk\030\002 \001(\0132\026.filestream.ImageChunk\"O"
  "\n\tImageHash\022\020\n\010fileHash\030\001 \001(\t\0220\n\rhashAlg"
  "orithm\030\002 \001(\0162\031.filestream.HashAlgorithm\""
  "\250\003\n\tFrameMeta\022\022\n\nframeIndex\030\001 \001(\r\0224\n\016epo"
  "chTimestamp\030\002 \001(\0132\032.filestream.EpochTime"
  "stampH\000\0224\n\016protoTimestamp\030\003 \001(\0132\032.google"
  ".protobuf.TimestampH\000\022(\n\timageHash\030\004 \001(\013"
  "2\025.filestream.ImageHash\022&\n\tframeSize\030\005 \001"
  "(\0132\023.filestream.MaxSize\022\023\n\013xAxisPixels\030\t"
  " \001(\r\022\023\n\013yAxisPixels\030\n \001(\r\022\025\n\rimageBitDep"
  "th\030\013 \001(\r\022\031\n\021imageBitDepthReal\030\014 \001(\r\022&\n\010c"
  "ameraId\030\r \001(\0132\024.filestream.CameraId\022\025\n\rc"
  "ontainerName\030\006 \001(\t\022\017\n\007xmpMeta\030\007 \001(\t\022\020\n\010e"
  "xifMeta\030\010 \001(\tB\013\n\ttimestamp\"J\n\020TransferRe"
  "sponse\022(\n\timageHash\030\001 \001(\0132\025.filestream.I"
  "mageHash\022\014\n\004size\030\002 \001(\r\"<\n\007MaxSize\022\014\n\004siz"
  "e\030\001 \001(\r\022#\n\004unit\030\002 \001(\0162\025.filestream.SizeU"
  "nits\"1\n\nImageChunk\022\017\n\007chunkId\030\001 \001(\r\022\022\n\nf"
  "rameChunk\030\002 \001(\014\"M\n\016EpochTimestamp\022\017\n\007sec"
  "onds\030\001 \001(\004\022\024\n\014milliseconds\030\002 \001(\001\022\024\n\014micr"
  "oseconds\030\003 \001(\001\",\n\010CameraId\022\020\n\010cameraId\030\001"
  " \001(\t\022\016\n\006lensId\030\002 \001(\t\"%\n\022HealthCheckReque"
  "st\022\017\n\007service\030\001 \001(\t\"\245\001\n\023HealthCheckRespo"
  "nse\022=\n\006status\030\001 \001(\0162-.filestream.HealthC"
  "heckResponse.ServingStatus\"O\n\rServingSta"
  "tus\022\013\n\007UNKNOWN\020\000\022\013\n\007SERVING\020\001\022\017\n\013NOT_SER"
  "VING\020\002\022\023\n\017SERVICE_UNKNOWN\020\003*F\n\rHashAlgor"
  "ithm\022\010\n\004SHA1\020\000\022\n\n\006SHA256\020\001\022\n\n\006SHA384\020\002\022\n"
  "\n\006SHA512\020\003\022\007\n\003MD5\020\004*B\n\tSizeUnits\022\010\n\004BYTE"
  "\020\000\022\r\n\tKILO_BYTE\020\001\022\r\n\tMEGA_BYTE\020\002\022\r\n\tGIGA"
  "_BYTE\020\0032K\n\010Transfer\022\?\n\nFileStream\022\021.file"
  "stream.Image\032\034.filestream.TransferRespon"
  "se(\0012\236\001\n\006Health\022H\n\005Check\022\036.filestream.He"
  "althCheckRequest\032\037.filestream.HealthChec"
  "kResponse\022J\n\005Watch\022\036.filestream.HealthCh"
  "eckRequest\032\037.filestream.HealthCheckRespo"
  "nse0\001B#\252\002 InFarm.FileStreamer.gRPCServic"
  "esb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FileStream_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_FileStream_2eproto_sccs[10] = {
  &scc_info_CameraId_FileStream_2eproto.base,
  &scc_info_EpochTimestamp_FileStream_2eproto.base,
  &scc_info_FrameMeta_FileStream_2eproto.base,
  &scc_info_HealthCheckRequest_FileStream_2eproto.base,
  &scc_info_HealthCheckResponse_FileStream_2eproto.base,
  &scc_info_Image_FileStream_2eproto.base,
  &scc_info_ImageChunk_FileStream_2eproto.base,
  &scc_info_ImageHash_FileStream_2eproto.base,
  &scc_info_MaxSize_FileStream_2eproto.base,
  &scc_info_TransferResponse_FileStream_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FileStream_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileStream_2eproto = {
  false, false, descriptor_table_protodef_FileStream_2eproto, "FileStream.proto", 1610,
  &descriptor_table_FileStream_2eproto_once, descriptor_table_FileStream_2eproto_sccs, descriptor_table_FileStream_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_FileStream_2eproto::offsets,
  file_level_metadata_FileStream_2eproto, 10, file_level_enum_descriptors_FileStream_2eproto, file_level_service_descriptors_FileStream_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_FileStream_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_FileStream_2eproto)), true);
namespace filestream {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthCheckResponse_ServingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FileStream_2eproto);
  return file_level_enum_descriptors_FileStream_2eproto[0];
}
bool HealthCheckResponse_ServingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::UNKNOWN;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::SERVING;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::NOT_SERVING;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::SERVICE_UNKNOWN;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::ServingStatus_MIN;
constexpr HealthCheckResponse_ServingStatus HealthCheckResponse::ServingStatus_MAX;
constexpr int HealthCheckResponse::ServingStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HashAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FileStream_2eproto);
  return file_level_enum_descriptors_FileStream_2eproto[1];
}
bool HashAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SizeUnits_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FileStream_2eproto);
  return file_level_enum_descriptors_FileStream_2eproto[2];
}
bool SizeUnits_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Image::_Internal {
 public:
  static const ::filestream::FrameMeta& framemeta(const Image* msg);
  static const ::filestream::ImageChunk& imagechunk(const Image* msg);
};

const ::filestream::FrameMeta&
Image::_Internal::framemeta(const Image* msg) {
  return *msg->framemeta_;
}
const ::filestream::ImageChunk&
Image::_Internal::imagechunk(const Image* msg) {
  return *msg->imagechunk_;
}
Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_framemeta()) {
    framemeta_ = new ::filestream::FrameMeta(*from.framemeta_);
  } else {
    framemeta_ = nullptr;
  }
  if (from._internal_has_imagechunk()) {
    imagechunk_ = new ::filestream::ImageChunk(*from.imagechunk_);
  } else {
    imagechunk_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:filestream.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_FileStream_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&framemeta_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&imagechunk_) -
      reinterpret_cast<char*>(&framemeta_)) + sizeof(imagechunk_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:filestream.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete framemeta_;
  if (this != internal_default_instance()) delete imagechunk_;
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_FileStream_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && framemeta_ != nullptr) {
    delete framemeta_;
  }
  framemeta_ = nullptr;
  if (GetArena() == nullptr && imagechunk_ != nullptr) {
    delete imagechunk_;
  }
  imagechunk_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .filestream.FrameMeta frameMeta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_framemeta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .filestream.ImageChunk imageChunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagechunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .filestream.FrameMeta frameMeta = 1;
  if (this->has_framemeta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::framemeta(this), target, stream);
  }

  // .filestream.ImageChunk imageChunk = 2;
  if (this->has_imagechunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::imagechunk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .filestream.FrameMeta frameMeta = 1;
  if (this->has_framemeta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *framemeta_);
  }

  // .filestream.ImageChunk imageChunk = 2;
  if (this->has_imagechunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imagechunk_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_framemeta()) {
    _internal_mutable_framemeta()->::filestream::FrameMeta::MergeFrom(from._internal_framemeta());
  }
  if (from.has_imagechunk()) {
    _internal_mutable_imagechunk()->::filestream::ImageChunk::MergeFrom(from._internal_imagechunk());
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, imagechunk_)
      + sizeof(Image::imagechunk_)
      - PROTOBUF_FIELD_OFFSET(Image, framemeta_)>(
          reinterpret_cast<char*>(&framemeta_),
          reinterpret_cast<char*>(&other->framemeta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImageHash::_Internal {
 public:
};

ImageHash::ImageHash(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.ImageHash)
}
ImageHash::ImageHash(const ImageHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filehash().empty()) {
    filehash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filehash(), 
      GetArena());
  }
  hashalgorithm_ = from.hashalgorithm_;
  // @@protoc_insertion_point(copy_constructor:filestream.ImageHash)
}

void ImageHash::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageHash_FileStream_2eproto.base);
  filehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hashalgorithm_ = 0;
}

ImageHash::~ImageHash() {
  // @@protoc_insertion_point(destructor:filestream.ImageHash)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageHash::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filehash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageHash::ArenaDtor(void* object) {
  ImageHash* _this = reinterpret_cast< ImageHash* >(object);
  (void)_this;
}
void ImageHash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageHash& ImageHash::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageHash_FileStream_2eproto.base);
  return *internal_default_instance();
}


void ImageHash::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.ImageHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filehash_.ClearToEmpty();
  hashalgorithm_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fileHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filehash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "filestream.ImageHash.fileHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .filestream.HashAlgorithm hashAlgorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hashalgorithm(static_cast<::filestream::HashAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageHash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.ImageHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileHash = 1;
  if (this->filehash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filehash().data(), static_cast<int>(this->_internal_filehash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filestream.ImageHash.fileHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filehash(), target);
  }

  // .filestream.HashAlgorithm hashAlgorithm = 2;
  if (this->hashalgorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_hashalgorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.ImageHash)
  return target;
}

size_t ImageHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.ImageHash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileHash = 1;
  if (this->filehash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filehash());
  }

  // .filestream.HashAlgorithm hashAlgorithm = 2;
  if (this->hashalgorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hashalgorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageHash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.ImageHash)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageHash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageHash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.ImageHash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.ImageHash)
    MergeFrom(*source);
  }
}

void ImageHash::MergeFrom(const ImageHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.ImageHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filehash().size() > 0) {
    _internal_set_filehash(from._internal_filehash());
  }
  if (from.hashalgorithm() != 0) {
    _internal_set_hashalgorithm(from._internal_hashalgorithm());
  }
}

void ImageHash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.ImageHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageHash::CopyFrom(const ImageHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.ImageHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageHash::IsInitialized() const {
  return true;
}

void ImageHash::InternalSwap(ImageHash* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filehash_.Swap(&other->filehash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(hashalgorithm_, other->hashalgorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageHash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrameMeta::_Internal {
 public:
  static const ::filestream::EpochTimestamp& epochtimestamp(const FrameMeta* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& prototimestamp(const FrameMeta* msg);
  static const ::filestream::ImageHash& imagehash(const FrameMeta* msg);
  static const ::filestream::MaxSize& framesize(const FrameMeta* msg);
  static const ::filestream::CameraId& cameraid(const FrameMeta* msg);
};

const ::filestream::EpochTimestamp&
FrameMeta::_Internal::epochtimestamp(const FrameMeta* msg) {
  return *msg->timestamp_.epochtimestamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
FrameMeta::_Internal::prototimestamp(const FrameMeta* msg) {
  return *msg->timestamp_.prototimestamp_;
}
const ::filestream::ImageHash&
FrameMeta::_Internal::imagehash(const FrameMeta* msg) {
  return *msg->imagehash_;
}
const ::filestream::MaxSize&
FrameMeta::_Internal::framesize(const FrameMeta* msg) {
  return *msg->framesize_;
}
const ::filestream::CameraId&
FrameMeta::_Internal::cameraid(const FrameMeta* msg) {
  return *msg->cameraid_;
}
void FrameMeta::set_allocated_epochtimestamp(::filestream::EpochTimestamp* epochtimestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_timestamp();
  if (epochtimestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(epochtimestamp);
    if (message_arena != submessage_arena) {
      epochtimestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epochtimestamp, submessage_arena);
    }
    set_has_epochtimestamp();
    timestamp_.epochtimestamp_ = epochtimestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:filestream.FrameMeta.epochTimestamp)
}
void FrameMeta::set_allocated_prototimestamp(PROTOBUF_NAMESPACE_ID::Timestamp* prototimestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_timestamp();
  if (prototimestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prototimestamp)->GetArena();
    if (message_arena != submessage_arena) {
      prototimestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prototimestamp, submessage_arena);
    }
    set_has_prototimestamp();
    timestamp_.prototimestamp_ = prototimestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:filestream.FrameMeta.protoTimestamp)
}
void FrameMeta::clear_prototimestamp() {
  if (_internal_has_prototimestamp()) {
    if (GetArena() == nullptr) {
      delete timestamp_.prototimestamp_;
    }
    clear_has_timestamp();
  }
}
FrameMeta::FrameMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.FrameMeta)
}
FrameMeta::FrameMeta(const FrameMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_containername().empty()) {
    containername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_containername(), 
      GetArena());
  }
  xmpmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_xmpmeta().empty()) {
    xmpmeta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_xmpmeta(), 
      GetArena());
  }
  exifmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exifmeta().empty()) {
    exifmeta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exifmeta(), 
      GetArena());
  }
  if (from._internal_has_imagehash()) {
    imagehash_ = new ::filestream::ImageHash(*from.imagehash_);
  } else {
    imagehash_ = nullptr;
  }
  if (from._internal_has_framesize()) {
    framesize_ = new ::filestream::MaxSize(*from.framesize_);
  } else {
    framesize_ = nullptr;
  }
  if (from._internal_has_cameraid()) {
    cameraid_ = new ::filestream::CameraId(*from.cameraid_);
  } else {
    cameraid_ = nullptr;
  }
  ::memcpy(&frameindex_, &from.frameindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&imagebitdepthreal_) -
    reinterpret_cast<char*>(&frameindex_)) + sizeof(imagebitdepthreal_));
  clear_has_timestamp();
  switch (from.timestamp_case()) {
    case kEpochTimestamp: {
      _internal_mutable_epochtimestamp()->::filestream::EpochTimestamp::MergeFrom(from._internal_epochtimestamp());
      break;
    }
    case kProtoTimestamp: {
      _internal_mutable_prototimestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_prototimestamp());
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:filestream.FrameMeta)
}

void FrameMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameMeta_FileStream_2eproto.base);
  containername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xmpmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exifmeta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&imagehash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&imagebitdepthreal_) -
      reinterpret_cast<char*>(&imagehash_)) + sizeof(imagebitdepthreal_));
  clear_has_timestamp();
}

FrameMeta::~FrameMeta() {
  // @@protoc_insertion_point(destructor:filestream.FrameMeta)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  containername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  xmpmeta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exifmeta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete imagehash_;
  if (this != internal_default_instance()) delete framesize_;
  if (this != internal_default_instance()) delete cameraid_;
  if (has_timestamp()) {
    clear_timestamp();
  }
}

void FrameMeta::ArenaDtor(void* object) {
  FrameMeta* _this = reinterpret_cast< FrameMeta* >(object);
  (void)_this;
}
void FrameMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameMeta& FrameMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameMeta_FileStream_2eproto.base);
  return *internal_default_instance();
}


void FrameMeta::clear_timestamp() {
// @@protoc_insertion_point(one_of_clear_start:filestream.FrameMeta)
  switch (timestamp_case()) {
    case kEpochTimestamp: {
      if (GetArena() == nullptr) {
        delete timestamp_.epochtimestamp_;
      }
      break;
    }
    case kProtoTimestamp: {
      if (GetArena() == nullptr) {
        delete timestamp_.prototimestamp_;
      }
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TIMESTAMP_NOT_SET;
}


void FrameMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.FrameMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  containername_.ClearToEmpty();
  xmpmeta_.ClearToEmpty();
  exifmeta_.ClearToEmpty();
  if (GetArena() == nullptr && imagehash_ != nullptr) {
    delete imagehash_;
  }
  imagehash_ = nullptr;
  if (GetArena() == nullptr && framesize_ != nullptr) {
    delete framesize_;
  }
  framesize_ = nullptr;
  if (GetArena() == nullptr && cameraid_ != nullptr) {
    delete cameraid_;
  }
  cameraid_ = nullptr;
  ::memset(&frameindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imagebitdepthreal_) -
      reinterpret_cast<char*>(&frameindex_)) + sizeof(imagebitdepthreal_));
  clear_timestamp();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 frameIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frameindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .filestream.EpochTimestamp epochTimestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_epochtimestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp protoTimestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prototimestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .filestream.ImageHash imageHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagehash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .filestream.MaxSize frameSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_framesize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string containerName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_containername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "filestream.FrameMeta.containerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string xmpMeta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_xmpmeta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "filestream.FrameMeta.xmpMeta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exifMeta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_exifmeta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "filestream.FrameMeta.exifMeta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 xAxisPixels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          xaxispixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 yAxisPixels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          yaxispixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 imageBitDepth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          imagebitdepth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 imageBitDepthReal = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          imagebitdepthreal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .filestream.CameraId cameraId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cameraid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameMeta::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.FrameMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frameIndex = 1;
  if (this->frameindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frameindex(), target);
  }

  // .filestream.EpochTimestamp epochTimestamp = 2;
  if (_internal_has_epochtimestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::epochtimestamp(this), target, stream);
  }

  // .google.protobuf.Timestamp protoTimestamp = 3;
  if (_internal_has_prototimestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prototimestamp(this), target, stream);
  }

  // .filestream.ImageHash imageHash = 4;
  if (this->has_imagehash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::imagehash(this), target, stream);
  }

  // .filestream.MaxSize frameSize = 5;
  if (this->has_framesize()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::framesize(this), target, stream);
  }

  // string containerName = 6;
  if (this->containername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_containername().data(), static_cast<int>(this->_internal_containername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filestream.FrameMeta.containerName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_containername(), target);
  }

  // string xmpMeta = 7;
  if (this->xmpmeta().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_xmpmeta().data(), static_cast<int>(this->_internal_xmpmeta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filestream.FrameMeta.xmpMeta");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_xmpmeta(), target);
  }

  // string exifMeta = 8;
  if (this->exifmeta().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exifmeta().data(), static_cast<int>(this->_internal_exifmeta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filestream.FrameMeta.exifMeta");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_exifmeta(), target);
  }

  // uint32 xAxisPixels = 9;
  if (this->xaxispixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_xaxispixels(), target);
  }

  // uint32 yAxisPixels = 10;
  if (this->yaxispixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_yaxispixels(), target);
  }

  // uint32 imageBitDepth = 11;
  if (this->imagebitdepth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_imagebitdepth(), target);
  }

  // uint32 imageBitDepthReal = 12;
  if (this->imagebitdepthreal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_imagebitdepthreal(), target);
  }

  // .filestream.CameraId cameraId = 13;
  if (this->has_cameraid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::cameraid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.FrameMeta)
  return target;
}

size_t FrameMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.FrameMeta)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string containerName = 6;
  if (this->containername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_containername());
  }

  // string xmpMeta = 7;
  if (this->xmpmeta().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_xmpmeta());
  }

  // string exifMeta = 8;
  if (this->exifmeta().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exifmeta());
  }

  // .filestream.ImageHash imageHash = 4;
  if (this->has_imagehash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imagehash_);
  }

  // .filestream.MaxSize frameSize = 5;
  if (this->has_framesize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *framesize_);
  }

  // .filestream.CameraId cameraId = 13;
  if (this->has_cameraid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cameraid_);
  }

  // uint32 frameIndex = 1;
  if (this->frameindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frameindex());
  }

  // uint32 xAxisPixels = 9;
  if (this->xaxispixels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_xaxispixels());
  }

  // uint32 yAxisPixels = 10;
  if (this->yaxispixels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yaxispixels());
  }

  // uint32 imageBitDepth = 11;
  if (this->imagebitdepth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_imagebitdepth());
  }

  // uint32 imageBitDepthReal = 12;
  if (this->imagebitdepthreal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_imagebitdepthreal());
  }

  switch (timestamp_case()) {
    // .filestream.EpochTimestamp epochTimestamp = 2;
    case kEpochTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_.epochtimestamp_);
      break;
    }
    // .google.protobuf.Timestamp protoTimestamp = 3;
    case kProtoTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_.prototimestamp_);
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.FrameMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.FrameMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.FrameMeta)
    MergeFrom(*source);
  }
}

void FrameMeta::MergeFrom(const FrameMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.FrameMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.containername().size() > 0) {
    _internal_set_containername(from._internal_containername());
  }
  if (from.xmpmeta().size() > 0) {
    _internal_set_xmpmeta(from._internal_xmpmeta());
  }
  if (from.exifmeta().size() > 0) {
    _internal_set_exifmeta(from._internal_exifmeta());
  }
  if (from.has_imagehash()) {
    _internal_mutable_imagehash()->::filestream::ImageHash::MergeFrom(from._internal_imagehash());
  }
  if (from.has_framesize()) {
    _internal_mutable_framesize()->::filestream::MaxSize::MergeFrom(from._internal_framesize());
  }
  if (from.has_cameraid()) {
    _internal_mutable_cameraid()->::filestream::CameraId::MergeFrom(from._internal_cameraid());
  }
  if (from.frameindex() != 0) {
    _internal_set_frameindex(from._internal_frameindex());
  }
  if (from.xaxispixels() != 0) {
    _internal_set_xaxispixels(from._internal_xaxispixels());
  }
  if (from.yaxispixels() != 0) {
    _internal_set_yaxispixels(from._internal_yaxispixels());
  }
  if (from.imagebitdepth() != 0) {
    _internal_set_imagebitdepth(from._internal_imagebitdepth());
  }
  if (from.imagebitdepthreal() != 0) {
    _internal_set_imagebitdepthreal(from._internal_imagebitdepthreal());
  }
  switch (from.timestamp_case()) {
    case kEpochTimestamp: {
      _internal_mutable_epochtimestamp()->::filestream::EpochTimestamp::MergeFrom(from._internal_epochtimestamp());
      break;
    }
    case kProtoTimestamp: {
      _internal_mutable_prototimestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_prototimestamp());
      break;
    }
    case TIMESTAMP_NOT_SET: {
      break;
    }
  }
}

void FrameMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.FrameMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameMeta::CopyFrom(const FrameMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.FrameMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameMeta::IsInitialized() const {
  return true;
}

void FrameMeta::InternalSwap(FrameMeta* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  containername_.Swap(&other->containername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  xmpmeta_.Swap(&other->xmpmeta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exifmeta_.Swap(&other->exifmeta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameMeta, imagebitdepthreal_)
      + sizeof(FrameMeta::imagebitdepthreal_)
      - PROTOBUF_FIELD_OFFSET(FrameMeta, imagehash_)>(
          reinterpret_cast<char*>(&imagehash_),
          reinterpret_cast<char*>(&other->imagehash_));
  swap(timestamp_, other->timestamp_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransferResponse::_Internal {
 public:
  static const ::filestream::ImageHash& imagehash(const TransferResponse* msg);
};

const ::filestream::ImageHash&
TransferResponse::_Internal::imagehash(const TransferResponse* msg) {
  return *msg->imagehash_;
}
TransferResponse::TransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.TransferResponse)
}
TransferResponse::TransferResponse(const TransferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_imagehash()) {
    imagehash_ = new ::filestream::ImageHash(*from.imagehash_);
  } else {
    imagehash_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:filestream.TransferResponse)
}

void TransferResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferResponse_FileStream_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&imagehash_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&imagehash_)) + sizeof(size_));
}

TransferResponse::~TransferResponse() {
  // @@protoc_insertion_point(destructor:filestream.TransferResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete imagehash_;
}

void TransferResponse::ArenaDtor(void* object) {
  TransferResponse* _this = reinterpret_cast< TransferResponse* >(object);
  (void)_this;
}
void TransferResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferResponse& TransferResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferResponse_FileStream_2eproto.base);
  return *internal_default_instance();
}


void TransferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.TransferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && imagehash_ != nullptr) {
    delete imagehash_;
  }
  imagehash_ = nullptr;
  size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .filestream.ImageHash imageHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imagehash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.TransferResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .filestream.ImageHash imageHash = 1;
  if (this->has_imagehash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imagehash(this), target, stream);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.TransferResponse)
  return target;
}

size_t TransferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.TransferResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .filestream.ImageHash imageHash = 1;
  if (this->has_imagehash()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imagehash_);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.TransferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.TransferResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.TransferResponse)
    MergeFrom(*source);
  }
}

void TransferResponse::MergeFrom(const TransferResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.TransferResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imagehash()) {
    _internal_mutable_imagehash()->::filestream::ImageHash::MergeFrom(from._internal_imagehash());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void TransferResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.TransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferResponse::CopyFrom(const TransferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.TransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferResponse::IsInitialized() const {
  return true;
}

void TransferResponse::InternalSwap(TransferResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferResponse, size_)
      + sizeof(TransferResponse::size_)
      - PROTOBUF_FIELD_OFFSET(TransferResponse, imagehash_)>(
          reinterpret_cast<char*>(&imagehash_),
          reinterpret_cast<char*>(&other->imagehash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MaxSize::_Internal {
 public:
};

MaxSize::MaxSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.MaxSize)
}
MaxSize::MaxSize(const MaxSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&size_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:filestream.MaxSize)
}

void MaxSize::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&size_)) + sizeof(unit_));
}

MaxSize::~MaxSize() {
  // @@protoc_insertion_point(destructor:filestream.MaxSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaxSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MaxSize::ArenaDtor(void* object) {
  MaxSize* _this = reinterpret_cast< MaxSize* >(object);
  (void)_this;
}
void MaxSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaxSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaxSize& MaxSize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaxSize_FileStream_2eproto.base);
  return *internal_default_instance();
}


void MaxSize::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.MaxSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&size_)) + sizeof(unit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaxSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .filestream.SizeUnits unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_unit(static_cast<::filestream::SizeUnits>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaxSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.MaxSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_size(), target);
  }

  // .filestream.SizeUnits unit = 2;
  if (this->unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.MaxSize)
  return target;
}

size_t MaxSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.MaxSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  // .filestream.SizeUnits unit = 2;
  if (this->unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaxSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.MaxSize)
  GOOGLE_DCHECK_NE(&from, this);
  const MaxSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaxSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.MaxSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.MaxSize)
    MergeFrom(*source);
  }
}

void MaxSize::MergeFrom(const MaxSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.MaxSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.unit() != 0) {
    _internal_set_unit(from._internal_unit());
  }
}

void MaxSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.MaxSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxSize::CopyFrom(const MaxSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.MaxSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxSize::IsInitialized() const {
  return true;
}

void MaxSize::InternalSwap(MaxSize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaxSize, unit_)
      + sizeof(MaxSize::unit_)
      - PROTOBUF_FIELD_OFFSET(MaxSize, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxSize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ImageChunk::_Internal {
 public:
};

ImageChunk::ImageChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.ImageChunk)
}
ImageChunk::ImageChunk(const ImageChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  framechunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_framechunk().empty()) {
    framechunk_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_framechunk(), 
      GetArena());
  }
  chunkid_ = from.chunkid_;
  // @@protoc_insertion_point(copy_constructor:filestream.ImageChunk)
}

void ImageChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageChunk_FileStream_2eproto.base);
  framechunk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chunkid_ = 0u;
}

ImageChunk::~ImageChunk() {
  // @@protoc_insertion_point(destructor:filestream.ImageChunk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  framechunk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageChunk::ArenaDtor(void* object) {
  ImageChunk* _this = reinterpret_cast< ImageChunk* >(object);
  (void)_this;
}
void ImageChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageChunk& ImageChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageChunk_FileStream_2eproto.base);
  return *internal_default_instance();
}


void ImageChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.ImageChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  framechunk_.ClearToEmpty();
  chunkid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 chunkId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chunkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes frameChunk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_framechunk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.ImageChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chunkId = 1;
  if (this->chunkid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chunkid(), target);
  }

  // bytes frameChunk = 2;
  if (this->framechunk().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_framechunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.ImageChunk)
  return target;
}

size_t ImageChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.ImageChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes frameChunk = 2;
  if (this->framechunk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_framechunk());
  }

  // uint32 chunkId = 1;
  if (this->chunkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunkid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageChunk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.ImageChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageChunk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageChunk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.ImageChunk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.ImageChunk)
    MergeFrom(*source);
  }
}

void ImageChunk::MergeFrom(const ImageChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.ImageChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.framechunk().size() > 0) {
    _internal_set_framechunk(from._internal_framechunk());
  }
  if (from.chunkid() != 0) {
    _internal_set_chunkid(from._internal_chunkid());
  }
}

void ImageChunk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.ImageChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageChunk::CopyFrom(const ImageChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.ImageChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageChunk::IsInitialized() const {
  return true;
}

void ImageChunk::InternalSwap(ImageChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  framechunk_.Swap(&other->framechunk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(chunkid_, other->chunkid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageChunk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EpochTimestamp::_Internal {
 public:
};

EpochTimestamp::EpochTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.EpochTimestamp)
}
EpochTimestamp::EpochTimestamp(const EpochTimestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&microseconds_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(microseconds_));
  // @@protoc_insertion_point(copy_constructor:filestream.EpochTimestamp)
}

void EpochTimestamp::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&microseconds_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(microseconds_));
}

EpochTimestamp::~EpochTimestamp() {
  // @@protoc_insertion_point(destructor:filestream.EpochTimestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EpochTimestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EpochTimestamp::ArenaDtor(void* object) {
  EpochTimestamp* _this = reinterpret_cast< EpochTimestamp* >(object);
  (void)_this;
}
void EpochTimestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EpochTimestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EpochTimestamp& EpochTimestamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EpochTimestamp_FileStream_2eproto.base);
  return *internal_default_instance();
}


void EpochTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.EpochTimestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&microseconds_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(microseconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochTimestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double milliseconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double microseconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EpochTimestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.EpochTimestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seconds = 1;
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seconds(), target);
  }

  // double milliseconds = 2;
  if (!(this->milliseconds() <= 0 && this->milliseconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_milliseconds(), target);
  }

  // double microseconds = 3;
  if (!(this->microseconds() <= 0 && this->microseconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_microseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.EpochTimestamp)
  return target;
}

size_t EpochTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.EpochTimestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 seconds = 1;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seconds());
  }

  // double milliseconds = 2;
  if (!(this->milliseconds() <= 0 && this->milliseconds() >= 0)) {
    total_size += 1 + 8;
  }

  // double microseconds = 3;
  if (!(this->microseconds() <= 0 && this->microseconds() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochTimestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.EpochTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochTimestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EpochTimestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.EpochTimestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.EpochTimestamp)
    MergeFrom(*source);
  }
}

void EpochTimestamp::MergeFrom(const EpochTimestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.EpochTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (!(from.milliseconds() <= 0 && from.milliseconds() >= 0)) {
    _internal_set_milliseconds(from._internal_milliseconds());
  }
  if (!(from.microseconds() <= 0 && from.microseconds() >= 0)) {
    _internal_set_microseconds(from._internal_microseconds());
  }
}

void EpochTimestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.EpochTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochTimestamp::CopyFrom(const EpochTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.EpochTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochTimestamp::IsInitialized() const {
  return true;
}

void EpochTimestamp::InternalSwap(EpochTimestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EpochTimestamp, microseconds_)
      + sizeof(EpochTimestamp::microseconds_)
      - PROTOBUF_FIELD_OFFSET(EpochTimestamp, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochTimestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CameraId::_Internal {
 public:
};

CameraId::CameraId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.CameraId)
}
CameraId::CameraId(const CameraId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cameraid().empty()) {
    cameraid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cameraid(), 
      GetArena());
  }
  lensid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lensid().empty()) {
    lensid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lensid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:filestream.CameraId)
}

void CameraId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraId_FileStream_2eproto.base);
  cameraid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lensid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CameraId::~CameraId() {
  // @@protoc_insertion_point(destructor:filestream.CameraId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cameraid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lensid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraId::ArenaDtor(void* object) {
  CameraId* _this = reinterpret_cast< CameraId* >(object);
  (void)_this;
}
void CameraId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraId& CameraId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraId_FileStream_2eproto.base);
  return *internal_default_instance();
}


void CameraId::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.CameraId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameraid_.ClearToEmpty();
  lensid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string cameraId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cameraid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "filestream.CameraId.cameraId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lensId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lensid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "filestream.CameraId.lensId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.CameraId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cameraId = 1;
  if (this->cameraid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cameraid().data(), static_cast<int>(this->_internal_cameraid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filestream.CameraId.cameraId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cameraid(), target);
  }

  // string lensId = 2;
  if (this->lensid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lensid().data(), static_cast<int>(this->_internal_lensid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filestream.CameraId.lensId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lensid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.CameraId)
  return target;
}

size_t CameraId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.CameraId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cameraId = 1;
  if (this->cameraid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cameraid());
  }

  // string lensId = 2;
  if (this->lensid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lensid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.CameraId)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.CameraId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.CameraId)
    MergeFrom(*source);
  }
}

void CameraId::MergeFrom(const CameraId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.CameraId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cameraid().size() > 0) {
    _internal_set_cameraid(from._internal_cameraid());
  }
  if (from.lensid().size() > 0) {
    _internal_set_lensid(from._internal_lensid());
  }
}

void CameraId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.CameraId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraId::CopyFrom(const CameraId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.CameraId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraId::IsInitialized() const {
  return true;
}

void CameraId::InternalSwap(CameraId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cameraid_.Swap(&other->cameraid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lensid_.Swap(&other->lensid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HealthCheckRequest::_Internal {
 public:
};

HealthCheckRequest::HealthCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.HealthCheckRequest)
}
HealthCheckRequest::HealthCheckRequest(const HealthCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service().empty()) {
    service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:filestream.HealthCheckRequest)
}

void HealthCheckRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HealthCheckRequest_FileStream_2eproto.base);
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HealthCheckRequest::~HealthCheckRequest() {
  // @@protoc_insertion_point(destructor:filestream.HealthCheckRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HealthCheckRequest::ArenaDtor(void* object) {
  HealthCheckRequest* _this = reinterpret_cast< HealthCheckRequest* >(object);
  (void)_this;
}
void HealthCheckRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthCheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthCheckRequest& HealthCheckRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthCheckRequest_FileStream_2eproto.base);
  return *internal_default_instance();
}


void HealthCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.HealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "filestream.HealthCheckRequest.service"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthCheckRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.HealthCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "filestream.HealthCheckRequest.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.HealthCheckRequest)
  return target;
}

size_t HealthCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.HealthCheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthCheckRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthCheckRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.HealthCheckRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.HealthCheckRequest)
    MergeFrom(*source);
  }
}

void HealthCheckRequest::MergeFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.HealthCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service().size() > 0) {
    _internal_set_service(from._internal_service());
  }
}

void HealthCheckRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckRequest::CopyFrom(const HealthCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.HealthCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckRequest::IsInitialized() const {
  return true;
}

void HealthCheckRequest::InternalSwap(HealthCheckRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_.Swap(&other->service_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HealthCheckResponse::_Internal {
 public:
};

HealthCheckResponse::HealthCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:filestream.HealthCheckResponse)
}
HealthCheckResponse::HealthCheckResponse(const HealthCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:filestream.HealthCheckResponse)
}

void HealthCheckResponse::SharedCtor() {
  status_ = 0;
}

HealthCheckResponse::~HealthCheckResponse() {
  // @@protoc_insertion_point(destructor:filestream.HealthCheckResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HealthCheckResponse::ArenaDtor(void* object) {
  HealthCheckResponse* _this = reinterpret_cast< HealthCheckResponse* >(object);
  (void)_this;
}
void HealthCheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthCheckResponse& HealthCheckResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthCheckResponse_FileStream_2eproto.base);
  return *internal_default_instance();
}


void HealthCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:filestream.HealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .filestream.HealthCheckResponse.ServingStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::filestream::HealthCheckResponse_ServingStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthCheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:filestream.HealthCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .filestream.HealthCheckResponse.ServingStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filestream.HealthCheckResponse)
  return target;
}

size_t HealthCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filestream.HealthCheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .filestream.HealthCheckResponse.ServingStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthCheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filestream.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthCheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthCheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filestream.HealthCheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filestream.HealthCheckResponse)
    MergeFrom(*source);
  }
}

void HealthCheckResponse::MergeFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filestream.HealthCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void HealthCheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filestream.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheckResponse::CopyFrom(const HealthCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filestream.HealthCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckResponse::IsInitialized() const {
  return true;
}

void HealthCheckResponse::InternalSwap(HealthCheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace filestream
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::filestream::Image* Arena::CreateMaybeMessage< ::filestream::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::filestream::ImageHash* Arena::CreateMaybeMessage< ::filestream::ImageHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::ImageHash >(arena);
}
template<> PROTOBUF_NOINLINE ::filestream::FrameMeta* Arena::CreateMaybeMessage< ::filestream::FrameMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::FrameMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::filestream::TransferResponse* Arena::CreateMaybeMessage< ::filestream::TransferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::TransferResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::filestream::MaxSize* Arena::CreateMaybeMessage< ::filestream::MaxSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::MaxSize >(arena);
}
template<> PROTOBUF_NOINLINE ::filestream::ImageChunk* Arena::CreateMaybeMessage< ::filestream::ImageChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::ImageChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::filestream::EpochTimestamp* Arena::CreateMaybeMessage< ::filestream::EpochTimestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::EpochTimestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::filestream::CameraId* Arena::CreateMaybeMessage< ::filestream::CameraId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::CameraId >(arena);
}
template<> PROTOBUF_NOINLINE ::filestream::HealthCheckRequest* Arena::CreateMaybeMessage< ::filestream::HealthCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::HealthCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::filestream::HealthCheckResponse* Arena::CreateMaybeMessage< ::filestream::HealthCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::filestream::HealthCheckResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
