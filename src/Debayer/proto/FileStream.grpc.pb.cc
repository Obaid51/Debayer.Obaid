// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/FileStream.proto

#include "proto/FileStream.pb.h"
#include "proto/FileStream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace filestream {

static const char* Transfer_method_names[] = {
  "/filestream.Transfer/FileStream",
};

std::unique_ptr< Transfer::Stub> Transfer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Transfer::Stub> stub(new Transfer::Stub(channel));
  return stub;
}

Transfer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FileStream_(Transfer_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::filestream::Image>* Transfer::Stub::FileStreamRaw(::grpc::ClientContext* context, ::filestream::TransferResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::filestream::Image>::Create(channel_.get(), rpcmethod_FileStream_, context, response);
}

void Transfer::Stub::experimental_async::FileStream(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::experimental::ClientWriteReactor< ::filestream::Image>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::filestream::Image>::Create(stub_->channel_.get(), stub_->rpcmethod_FileStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::filestream::Image>* Transfer::Stub::AsyncFileStreamRaw(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::filestream::Image>::Create(channel_.get(), cq, rpcmethod_FileStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::filestream::Image>* Transfer::Stub::PrepareAsyncFileStreamRaw(::grpc::ClientContext* context, ::filestream::TransferResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::filestream::Image>::Create(channel_.get(), cq, rpcmethod_FileStream_, context, response, false, nullptr);
}

Transfer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Transfer_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Transfer::Service, ::filestream::Image, ::filestream::TransferResponse>(
          [](Transfer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::filestream::Image>* reader,
             ::filestream::TransferResponse* resp) {
               return service->FileStream(ctx, reader, resp);
             }, this)));
}

Transfer::Service::~Service() {
}

::grpc::Status Transfer::Service::FileStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::filestream::Image>* reader, ::filestream::TransferResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Health_method_names[] = {
  "/filestream.Health/Check",
  "/filestream.Health/Watch",
};

std::unique_ptr< Health::Stub> Health::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Health::Stub> stub(new Health::Stub(channel));
  return stub;
}

Health::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Check_(Health_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Watch_(Health_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Health::Stub::Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::filestream::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Check_, context, request, response);
}

void Health::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, std::move(f));
}

void Health::Stub::experimental_async::Check(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::filestream::HealthCheckResponse>* Health::Stub::PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::filestream::HealthCheckResponse>::Create(channel_.get(), cq, rpcmethod_Check_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::filestream::HealthCheckResponse>* Health::Stub::AsyncCheckRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::filestream::HealthCheckResponse>* Health::Stub::WatchRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::filestream::HealthCheckResponse>::Create(channel_.get(), rpcmethod_Watch_, context, request);
}

void Health::Stub::experimental_async::Watch(::grpc::ClientContext* context, ::filestream::HealthCheckRequest* request, ::grpc::experimental::ClientReadReactor< ::filestream::HealthCheckResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::filestream::HealthCheckResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Watch_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::filestream::HealthCheckResponse>* Health::Stub::AsyncWatchRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::filestream::HealthCheckResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::filestream::HealthCheckResponse>* Health::Stub::PrepareAsyncWatchRaw(::grpc::ClientContext* context, const ::filestream::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::filestream::HealthCheckResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, false, nullptr);
}

Health::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Health_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Health::Service, ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>(
          [](Health::Service* service,
             ::grpc::ServerContext* ctx,
             const ::filestream::HealthCheckRequest* req,
             ::filestream::HealthCheckResponse* resp) {
               return service->Check(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Health_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Health::Service, ::filestream::HealthCheckRequest, ::filestream::HealthCheckResponse>(
          [](Health::Service* service,
             ::grpc::ServerContext* ctx,
             const ::filestream::HealthCheckRequest* req,
             ::grpc::ServerWriter<::filestream::HealthCheckResponse>* writer) {
               return service->Watch(ctx, req, writer);
             }, this)));
}

Health::Service::~Service() {
}

::grpc::Status Health::Service::Check(::grpc::ServerContext* context, const ::filestream::HealthCheckRequest* request, ::filestream::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Health::Service::Watch(::grpc::ServerContext* context, const ::filestream::HealthCheckRequest* request, ::grpc::ServerWriter< ::filestream::HealthCheckResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace filestream

